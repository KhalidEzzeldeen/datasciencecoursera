folds = createFolds(y=spam$type,k = 10,list = TRUE,returnTrain = TRUE)
head(folds)
length(spam)
sapplay(folds,length)
sapply(folds,length)
folds[[1]]
folds[[1]][1:10]
folds[[2]][1:10]
folds2 = createFolds(y=spam$type,k = 10,list = TRUE,returnTrain = FALSE)
head(folds2)
sapply(folds2,length)
folds2[[2]][1:10]
?createDataPartition
folds3 = createResample(y=spam$type,times = 10,list = TRUE)
head(folds3)
sapply(folds3,length)
folds3[[2]][1:10]
folds$train
install.packages("RANN")
library(ISLR)
install.packages("ISLR")
library(ISLR)
library(caret)
data(Wage)
inTrain = createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training = Wage[inTrain]
testing = Wage[-inTrain]
training = Wage[inTrain]
testing = Wage[-inTrain]
table(training$jobclass )
training
training = Wage[inTrain,]
testing = Wage[-inTrain,]
table(training$jobclass)
training
View(training)
table(training$jobclass)
dumies = dummyVars(wage ~ jobclass , data=training )
dumies
class(dumies)
predict(dumies,newdata=training)
pre = predict(dumies,newdata=training)
head(pre)
nsv=nearZeroVar(training,saveMetrics = TRUE)
nsv
library(splines)
bsBasis = bs(training$age,df=3)
bsBasis
lm1 = lm(wage ~ bsBasis , data=training)
plot(training$age,training$wage,pch=19,cex=0.5)
points(training$age,predict(lm1,newdat=training),col='red',pch=19,cex=0.5)
predict(bsBasis,age=testing$age)
head(predict(bsBasis,age=testing$age))
head(bs(testing$age,df=3))
bsBasis
head(bsBasis)
head(bs(testing$age,df=3))
library(caret)
library(kernlab)
data(spam)
training = spam[inTrain,]
testing = spam[-inTrain,]
M = abs(cor(training,[,-58]))
M = abs(cor(training[,-58]))
M
diag(M)=0
which(M>0.8)
which(M>0.8,arr.ind=T)
plot(spam[,34],spam[,32])
plot(spam[,40],spam[,34])
plot(spam[,46],spam[,41])
smallSpam=spam[,c[32,34]]
smallSpam=spam[,c(32,34)]
preComp = prcomp(smallSpam)
plot(preComp$x[,1],preComp$x[,2])
preComp
preComp$x
head(preComp$x)
preComp$rotation
typecolor <- ((spam$type="spam")*l + 1)
typecolor <- ((spam$type="spam")*1 + 1)
typecolor <- ((spam$type=="spam")*1 + 1)
prComp = preComp(log10(spam[,-58]+1))
prComp = prcomp(log10(spam[,-58]+1))
plot ( prComp$x [ , 1 ] , prComp$x [ ,2 ] , col = typecolor,xlab="PC1",ylab="PC2" )
plot ( prComp$x [ , 1 ] , prComp$x [ ,2 ] , col = typecolor,xlab="PC1",ylab="PC2" )
prComp
plot (prComp$x [,1] , prComp$x [,2] , col = typecolor,xlab="PC1",ylab="PC2" )
View(spam)
typecolor <- ((spam$type=="spam")*1 + 1)
prComp = prcomp(log10(spam[,-58]+1))
plot (prComp$x [,1] , prComp$x [,2] , col = typecolor,xlab="PC1",ylab="PC2" )
plot (prComp$x [,1],prComp$x [,2],col=typecolor,xlab="PC1",ylab="PC2" )
typecolor <- ((spam$type=="spam")*1 + 10)
prComp = prcomp(log10(spam[,-58]+1))
plot (prComp$x [,1],prComp$x [,2],col=typecolor,xlab="PC1",ylab="PC2" )
prComp
typecolor = ((spam$type=="spam")*1 + 1)
prComp = prcomp(log10(spam[,-58]+1))
plot (prComp$x [,1],prComp$x [,2],col=typecolor,xlab="PC1",ylab="PC2" )
data(spam)
View(spam)
typecolor = ((spam$type=="spam")*1 + 1)
prComp = prcomp(log10(spam[,-58]+1))
plot (prComp$x [,1],prComp$x [,2],col=typecolor,xlab="PC1",ylab="PC2" )
preproc <- preProcess(logl0(spam[,-58]+1),method="pca",pcaCo1tp=2)
preproc <- preProcess(log10(spam[,-58]+1),method="pca",pcaCo1tp=2)
spamPC <- predict(preProc,loglO(spam[,-58]+1))
spamPC <- predict(preproc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typecolor )
modelfit = train(training$type ~ . , method="glm",data=spamPC)
preproc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp =2)
spamPC <- predict(preproc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typecolor )
modelfit = train(training$type ~ . , method="glm",data=spamPC)
data(spam)
inTrain = createDataPartition(y=spam$type,p=0.75,list=FALSE)
training = spam[inTrain,]
testing = spam[-inTrain,]
preproc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp =2)
spamPC <- predict(preproc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typecolor )
modelfit = train(training$type ~ . , method="glm",data=spamPC)
preproc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp =2)
spamPC <- predict(preproc,log10(training[,-58]+1))
modelfit = train(training$type ~ . , method="glm",data=spamPC)
spamPC
confusionMatrix(testing$type,predict(modelfit,testing$type))
testPc = predict(preproc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelfit,testing$type))
preproc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp =2)
spamPC <- predict(preproc,log10(training[,-58]+1))
modelfit = train(training$type ~ . , method="glm",data=spamPC)
testPc = predict(preproc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelfit,testing$type))
confusionMatrix(testing$type,predict(modelfit,testPc))
modelfit = train(training$type ~ . , method = "glm" , preProcess="pca", data = training)
confusionMatrix(training$type,predict(modelfit,testing))
library(caret)
library(kernlab)
data(spam)
inTrain = createDataPartition(y=spam$type,p=0.75,list=FALSE)
training = spam[inTrain,]
testing = spam[-inTrain,]
modelfit = train(training$type ~ . , method = "glm" , preProcess="pca", data = training)
confusionMatrix(testing$type,predict(modelfit,testing))
modelfit = train(training$type ~ . , method = "glm" , preProcess="pca", data = training)
library(caret)
data(faithful)
head(faithful)
set.seed(333)
inTrain = createDataPartition(y=faithful$waiting,p=0.5,list=FALSE)
trainFaith = faithful[inTrain,]
testFaith  = faithful[-inTrain,]
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue")
lm1 = lm(eruptions~waiting,data=trainFaith)
summary(lm1)
lines(trainFaith$waiting,lm1$fitted.values,lwd=3)
predict(lm1,newDat)
predict(lm1,newData)
newData = data.frame(waiting=80)
predict(lm1,newData)
newData = data.frame(waiting=c(80,90,100))
predict(lm1,newData)
par(mfrow=c(1,2))
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue")
lines(trainFaith$waiting,predict(lm1),lwd=3)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="red")
lines(trainFaith$waiting,predict(lm1,newData=testFaith),lwd=3,col="red")
confusionMatrix(testFaith$eruptions,predict(lm1,testFaith))
confusionMatrix(testFaith$eruptions,predict(lm1,newData=testFaith))
modelFit = train(eruptions~waiting,data=trainFaith,method="lm")
summary(modelFit$finalModel)
confusionMatrix(testFaith$eruptions,predict(modelFit,testFaith))
predict(modelFit,testFaith)
testFaith$eruptions
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
Wage
View(Wage)
Wage=subset(Wage,select=-c(logwage))
summary(Wage)
View(Wage)
inTrain = createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training = Wage[inTrain,]
testing = Wage[-inTrain,]
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training
qplot(age,wage,colour=jobclass,data=training)
qplot(age,wage,colour=jobclass,data=training)
qplot(age,wage,colour=education,data=training)
modelFit = train(wage~age+jobclass+education,method="lm",data="training")
modelFit = train(wage~age+jobclass+education,method="lm",data=training)
print(modelFit$finalModel)
plot(modelFit$finalModel,1,pch=19,cex=0.5,col="#00000010")
pred = predict(modelFit,testing)
qplot(wage,pred,colour=year,data=testing)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
View(predictors)
data(AlzheimerDisease)
AlzheimerDisease
head(diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
plot(mixtures$CompressiveStrength)
plot(mixtures$CompressiveStrength)
qplot(mixtures$CompressiveStrength)
plot(mixtures$CompressiveStrength)
featurePlot(x=training[,c("Cement","BlastFurnaceSlag","FlyAsh")],y=mixtures$CompressiveStrength,plot="pairs")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(mixtures$CompressiveStrength)
featurePlot(x=training[,c("Cement","BlastFurnaceSlag","FlyAsh")],y=mixtures$CompressiveStrength,plot="pairs")
featurePlot(x=training[,c("Cement","BlastFurnaceSlag","FlyAsh")],y=training$CompressiveStrength,plot="pairs")
featurePlot(x=training[,c("Water","Superplasticizer","CoarseAggregate")],y=training$CompressiveStrength,plot="pairs")
featurePlot(x=training[,c("FineAggregate","Age")],y=training$CompressiveStrength,plot="pairs")
featurePlot(x=training[,c("Cement","BlastFurnaceSlag","FlyAsh")],y=training$CompressiveStrength,plot="pairs")
plot(mixtures$CompressiveStrength)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(log10(training$Superplasticizer+1))
hist(log10(training$Superplasticizer))
plot(mixtures$CompressiveStrength)
plot(training$CompressiveStrength)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
trainColNames=grep("^IL",colnames(training),value = TRUE)
trainColNames
preProc = preProcess(training,training[,trainColNames],method = "pca", thresh = 0.9))
preProc = preProcess(training,training[,trainColNames],method = "pca", thresh = 0.9)
preProc = preProcess(training[,trainColNames],method = "pca", thresh = 0.9)
preProc$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainColNames=grep("^IL",colnames(training),value = TRUE)
preProc = preProcess(training[,trainColNames],method = "pca", thresh = 0.8)
modelfit = train(training$diagnosis ~ . , method="glm",data=spamPC)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
testing = adData[-inTrain,]
trainColNames=grep("^IL",colnames(training),value = TRUE)
preProc = preProcess(training[,trainColNames],method = "pca", thresh = 0.8)
spamPC <- predict(preproc,training[,trainColNames])
modelfit = train(training$diagnosis ~ . , method="glm",data=spamPC)
preProc = preProcess(training[,trainColNames],method = "pca", thresh = 0.8)
spamPC <- predict(preproc,training[,trainColNames])
preProc = preProcess(training[,trainColNames],method = "pca", thresh = 0.8)
training[,trainColNames]
preProc = preProcess(training[,trainColNames],method = "pca", thresh = 0.8)
spamPC <- predict(preproc,training[,trainColNames])
spamPC <- predict(preproc,log10(training[,trainColNames]+1))
preProc = preProcess(training[,trainColNames],method = "pca", thresh = 0.8)
spamPC <- predict(preproc,training[,trainColNames])
spamPC <- predict(preProc,training[,trainColNames])
modelfit = train(training$diagnosis ~ . , method="glm",data=spamPC)
testPc = predict(preProc,testing[,trainColNames])
confusionMatrix(testing$diagnosis,predict(modelfit,testPc))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainColNames=grep("^IL",colnames(training),value = TRUE)
modelfit = train(training$diagnosis ~ . , method="glm",data=training)
confusionMatrix(testing$diagnosis,predict(modelfit,testing)) # accurcy = 0.7195
confusionMatrix(predict(modelfit,testing),testing$diagnosis) # accurcy = 0.7195
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelfit = train(training$diagnosis ~ . , method="glm",data=training[,trainColNames])
confusionMatrix(predict(modelfit,testing[,trainColNames]),testing$diagnosis) # accurcy = 0.7195
View(training)
modelfit = train(training$diagnosis ~ . , method="glm",data=training[,c(trainColNames,1)])
modelfit = train(training$diagnosis ~ . , method="glm",data=training[,c(1,trainColNames)])
modelfit = train(training$diagnosis ~ . , method="glm",data=training[,c("diagnosis",trainColNames)])
confusionMatrix(predict(modelfit,testing[,trainColNames]),testing$diagnosis) # accurcy =  0.6463
confusionMatrix(predict(modelfit,testing[,c("diagnosis",trainColNames)]),testing$diagnosis) # accurcy =  0.6463
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainColNames=grep("^IL",colnames(training),value = TRUE)
preProc = preProcess(training[,trainColNames],method = "pca", thresh = 0.9)
preProc$rotation
preProc = preProcess(training[,trainColNames],method = "pca", thresh = 0.8)
preProc$rotation
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
data(iris)
library(ggplot2)
names(iris)
head(iris)
table(iris)
table(iris$Species)
library(cavet)
library(caret)
inTrain = createDataPartition(y=iris$Species,p=0.7,list=FALSE)
testing  = iris[-inTrain,]
dim(training)
training = iris[inTrain,]
testing  = iris[-inTrain,]
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit = train(Species ~ . , method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
library(rpart)
fancyRpartPlot(modFit$finalModel)
library(caret)
data(iris)
library(ggplot2)
names(iris)
table(iris$Species)
head(iris)
inTrain  = createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training = iris[inTrain,]
testing  = iris[-inTrain,]
modFit = train(Species ~ . , method="rpart",data=training)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
install.packages("rattle")
install.packages("rpart")
library(rattle)
library(rpart)
install.packages("rpart")
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
predict(modFit,newdata=testing)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone,package="ElemStatLearn")
ozone = ozone[order(ozone$ozone),]
head(ozone)
ll = matrix(NA,nrow=10,ncol=155)
dim(ozone)
ss = sample(1:dim(ozone)[1],replace=T)
ozone0= ozone[ss,]
View(ozone0)
View(ozone)
View(ozone0)
View(ozone0)
ozone0= ozone[order(ozone$ozone),]
View(ozone0)
View(ozone)
View(ozone0)
View(ozone0)
View(ozone)
loess0= loess(temperature ~ ozone , data=ozone0,span=0.2)
loess0
newdata = data.frame(ozone=1:155)
View(newdata)
ll = matrix(NA,nrow=10,ncol=155)
for(i in 1:10)
{
ss = sample(1:dim(ozone)[1],replace=T)
ozone0= ozone[ss,]
ozone0= ozone[order(ozone$ozone),]
loess0= loess(temperature ~ ozone , data=ozone0,span=0.2)
ll[i,]=predict(loess0,newdata = data.frame(ozone=1:155))
}
View(ll)
?loess
plot(ozone$ozone ~ ozone$temperature,pch=19,cex=0.5)
plot(ozone$ozone , ozone$temperature,pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="gery",lwd=2}
for(i in 1:10){lines(1:155,ll[i,],col="gery",lwd=2)}
for(i in 1:10){lines(1:155,ll[i,],col="gray",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
ll = matrix(NA,nrow=10,ncol=155)
ss = sample(1:dim(ozone)[1],replace=T)
ozone0= ozone[ss,]
ozone0= ozone0[order(ozone0$ozone),]
View(ozone0)
View(ozone)
View(ozone0)
ll = matrix(NA,nrow=10,ncol=155)
for(i in 1:10)
{
ss = sample(1:dim(ozone)[1],replace=T)
ozone0= ozone[ss,]
ozone0= ozone0[order(ozone0$ozone),]
loess0= loess(temperature ~ ozone , data=ozone0,span=0.2)
ll[i,]=predict(loess0,newdata = data.frame(ozone=1:155))
}
ll = matrix(NA,nrow=10,ncol=155)
for(i in 1:10)
{
ss = sample(1:dim(ozone)[1],replace=T)
ozone0= ozone[ss,]
ozone0= ozone0[order(ozone0$ozone),]
loess0= loess(temperature ~ ozone , data=ozone0,span=0.2)
ll[i,]=predict(loess0,newdata = data.frame(ozone=1:155))
}
library(ElemStatLearn)
library(caret)
data(iris)
ll = matrix(NA,nrow=10,ncol=155)
for(i in 1:10)
{
ss = sample(1:dim(ozone)[1],replace=T)
ozone0= ozone[ss,]
ozone0= ozone0[order(ozone0$ozone),]
loess0= loess(temperature ~ ozone , data=ozone0,span=0.2)
ll[i,]=predict(loess0,newdata = data.frame(ozone=1:155))
}
plot(ozone$ozone , ozone$temperature,pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="gray",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
View(ll)
# Predicting with trees
library(caret)
data(iris)
library(ggplot2)
names(iris)
head(iris)
table(iris$Species)
inTrain  = createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training = iris[inTrain,]
testing  = iris[-inTrain,]
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit = train(Species ~ . , method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
install.packages("rattle")
install.packages("rpart")
install.packages("rpart.plot")
library(rattle)
library(rpart)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
install.packages("rattle")
install.packages("rpart")
library(slidify)
setwd("D:/Courses/Developing Data Products/Projects")
library(slidify)
setwd("D:/Courses/Developing Data Products/Projects")
author("Comparison")
